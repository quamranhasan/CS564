# -*- coding: utf-8 -*-
"""20190874_CS564_FINAL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ElTNYOjYB0qjG8oST_PwLgyFvfsascKM
"""

#import necessary modules
import pandas as pd
import seaborn as sns

#load the dataset and take a look
df = pd.read_csv("train.csv")
df

#getting the nan values per column and the data types
print(df.isna().sum())
print(df.dtypes)

df['Transported'].value_counts()

#converting categorical/boolean values to numerical values 
df['HomePlanet'].replace({"Earth":1.0, "Europa":2.0, "Mars": 3.0}, inplace =True)
df['CryoSleep'].replace({True:1.0, False:0.0}, inplace = True)
df['VIP'].replace({True:1.0,False:0.0}, inplace = True)
df

#looking at the distribution after conversion
sns.displot(df["HomePlanet"])
sns.displot(df["CryoSleep"])
sns.displot(df["VIP"])

#getting the mean/mode values for the columns and then replacing the nan values
age_fill = df['Age'].mean()
HP_fill= df['HomePlanet'].mode().iat[0]
CS_fill = df['CryoSleep'].mode().iat[0]
VIP_fill = df['VIP'].mode().iat[0]
RS_fill = df['RoomService'].mean()
FC_fill = df['FoodCourt'].mean()
SM_fill = df['ShoppingMall'].mean()
spa_fill = df['Spa'].mean()
VR_fill = df['VRDeck'].mean()

df['HomePlanet'] = df['HomePlanet'].fillna(HP_fill)
df['CryoSleep'] = df['CryoSleep'].fillna(CS_fill)
df['VIP'] = df['VIP'].fillna(VIP_fill)
df['RoomService'] = df['RoomService'].fillna(RS_fill)
df['FoodCourt'] = df['FoodCourt'].fillna(FC_fill)
df['ShoppingMall'] = df['ShoppingMall'].fillna(SM_fill)
df['Spa'] = df['Spa'].fillna(spa_fill)
df['VRDeck'] = df['VRDeck'].fillna(VR_fill)
df['Age'] = df['Age'].fillna(age_fill)

#binning the ages into age groups and then assigning the groups to a float

df.loc[df['Age'].between(0, 10, 'both'), 'Age_group'] = 'child'
df.loc[df['Age'].between(10, 20, 'right'), 'Age_group'] = 'teen'
df.loc[df['Age'].between(20, 35, 'right'), 'Age_group'] = 'young_adult'
df.loc[df['Age'].between(35, 50, 'right'), 'Age_group'] = 'adult'
df.loc[df['Age'].between(50, 80, 'right'), 'Age_group'] = 'old'

df['Age_group'].replace({"child":1.0, "teen":2.0, "young_adult": 3.0, "adult": 4.0, "old": 5.0}, inplace =True)
df

#dropping the unnecessary columns
df = df.drop(['PassengerId', 'Name','Destination',"Cabin", "Age"],axis=1)

#confirming if the nan values have all beeen taken care or not
print(df.isna().sum())
df.describe()

#model to be used
import xgboost as xgb
from sklearn.model_selection import GridSearchCV
import numpy as np
from sklearn.metrics import accuracy_score

#spliting the dataset
from sklearn.model_selection import train_test_split

X = df.loc[:, df.columns != 'Transported']
y = df["Transported"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

#grid search with cross validation for hypertuning
xgb_model = xgb.XGBClassifier()
xgb_param_grid = {'learning_rate': [0.1, 0.01], 'n_estimators': [50,100,150,200,250],'max_depth':[2,3,4,5]}
grid= GridSearchCV(xgb_model, xgb_param_grid, cv=5, scoring='accuracy',return_train_score=False)
grid_search=grid.fit(X_train, y_train)

print(grid_search.best_params_)

accuracy = grid_search.best_score_ *100
print("Accuracy for our training dataset with tuning is : {:.2f}%".format(accuracy) )

#initializing the model with the optimal parameters and fitting the test set
model = xgb.XGBClassifier(learning_rate=0.1,n_estimators=200,max_depth = 3)

xgb_model.fit(X_train, y_train)

y_test_hat=xgb_model.predict(X_test) 

test_accuracy=accuracy_score(y_test,y_test_hat)*100

print("Accuracy for our testing dataset with tuning is : {:.2f}%".format(test_accuracy) )

df2 = pd.read_csv("test.csv")
df2

#repeating same preprocessing with the test set
df_ID = df2


df2['HomePlanet'].replace({"Earth":1.0, "Europa":2.0, "Mars": 3.0}, inplace =True)
df2['CryoSleep'].replace({True:1.0, False:0.0}, inplace = True)
df2['VIP'].replace({True:1.0,False:0.0}, inplace = True)


age_fill = df2['Age'].mean()
HP_fill= df2['HomePlanet'].mode().iat[0]
CS_fill = df2['CryoSleep'].mode().iat[0]
VIP_fill = df2['VIP'].mode().iat[0]
RS_fill = df2['RoomService'].mean()
FC_fill = df2['FoodCourt'].mean()
SM_fill = df2['ShoppingMall'].mean()
spa_fill = df2['Spa'].mean()
VR_fill = df2['VRDeck'].mean()

df2['HomePlanet'] = df2['HomePlanet'].fillna(HP_fill)
df2['CryoSleep'] = df2['CryoSleep'].fillna(CS_fill)
df2['VIP'] = df2['VIP'].fillna(VIP_fill)
df2['RoomService'] = df2['RoomService'].fillna(RS_fill)
df2['FoodCourt'] = df2['FoodCourt'].fillna(FC_fill)
df2['ShoppingMall'] = df2['ShoppingMall'].fillna(SM_fill)
df2['Spa'] = df2['Spa'].fillna(spa_fill)
df2['VRDeck'] = df2['VRDeck'].fillna(VR_fill)
df2['Age'] = df2['Age'].fillna(age_fill)

df2.loc[df2['Age'].between(0, 10, 'both'), 'Age_group'] = 'child'
df2.loc[df2['Age'].between(10, 20, 'right'), 'Age_group'] = 'teen'
df2.loc[df2['Age'].between(20, 35, 'right'), 'Age_group'] = 'young_adult'
df2.loc[df2['Age'].between(35, 50, 'right'), 'Age_group'] = 'adult'
df2.loc[df2['Age'].between(50, 80, 'right'), 'Age_group'] = 'old'

df2['Age_group'].replace({"child":1.0, "teen":2.0, "young_adult": 3.0, "adult": 4.0, "old": 5.0}, inplace =True)


df2 = df2.drop(['PassengerId', 'Name','Destination',"Cabin","Age"],axis=1)
df2

df2.isna().sum()

df_training = df
df_test = df2

x_training = df_training.loc[:, df_training.columns != 'Transported']
y_training = df_training["Transported"]

x_test = df_test.loc[:, df_test.columns != 'Transported']



xgb_model = xgb.XGBClassifier(learning_rate=0.1,n_estimators=200,max_depth = 3)

xgb_model.fit(x_training, y_training)

y_prediction = xgb_model.predict(x_test)

output = pd.DataFrame({'PassengerId': df_ID['PassengerId'], 'Transported':y_prediction})

output.to_csv("20190874_XGB_0.1_200_3_formatted.csv",index = False)